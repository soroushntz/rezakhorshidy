{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNQLWNzEdNf3BlexWxTVFVX",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/RozhanGhanavati/barname-nevisi/blob/main/1untitled5.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class A:\n",
        "    def __init__(self, age, height):\n",
        "        self.age = age\n",
        "        self.height = height\n",
        "\n",
        "    def str(self):\n",
        "        return f\"Age: {self.age}, Height: {self.height}\"\n",
        "\n",
        "    def print_details(self):\n",
        "        print(f\"Age: {self.age}, Height: {self.height}\")\n",
        "\n",
        "class B(A):\n",
        "    def init(self, age, height):\n",
        "        super().init(age, height)\n",
        "        self.size = None\n",
        "\n",
        "    def calculate_size(self, width):\n",
        "        self.size = width * self.height\n",
        "        return self.size\n",
        "\n",
        "    def print_details(self):\n",
        "        super().print_details()\n",
        "        print(f\"Size: {self.size}\")\n",
        "\n",
        "    def b_specific_method(self):\n",
        "        print(\"This is B specific method\")\n",
        "\n",
        "class C(A):\n",
        "    def init(self, age, height, capacity):\n",
        "        super().init(age, height)\n",
        "        self.capacity = capacity\n",
        "\n",
        "    def print_details(self):\n",
        "        super().print_details()\n",
        "        print(f\"Capacity: {self.capacity}\")\n",
        "\n",
        "    def c_specific_method(self):\n",
        "        print(\"This is C specific method\")\n",
        "\n",
        "class D(B, C):\n",
        "    def __init__(self, age, height, size, capacity, t):\n",
        "        B.init(self, age, height)\n",
        "        C.init(self, age, height, capacity)\n",
        "        self.size = size\n",
        "        self.capacity = capacity\n",
        "        self.t = t\n",
        "\n",
        "    def print_details(self):\n",
        "        super().print_details()\n",
        "        print(f\"T: {self.t}\")\n",
        "\n",
        "    def d_specific_method(self):\n",
        "        self.b_specific_method()\n",
        "        self.c_specific_method()"
      ],
      "metadata": {
        "id": "ySEQpIQ_uFJ_"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
